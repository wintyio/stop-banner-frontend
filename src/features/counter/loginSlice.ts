import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import axios from "axios";

export interface LoginState {
  value: number;
  username: string;
  status: "none" | "logging" | "logged in" | "failed";
  kakaoAccessToken: string;
}

const initialState: LoginState = {
  value: 0,
  username: "",
  status: "none",
  kakaoAccessToken: ""
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const kakaoLoginAsync = createAsyncThunk(
  "login/kakaoLogin",
  async () => {
    window.Kakao.Auth.authorize({
      redirectUri: window.location.protocol + "//" + window.location.host + "/" + "stop-banner-frontend/",
    })
  }
);

export const getKakaoAccessTokenAsync = createAsyncThunk(
  "login/kakaoAccessToken",
  async (code: string) => {
    let grant_type = "authorization_code";
    let client_id = "b76f1c8406260f4ffdafd2f02f05222e"; // REST API KEY

    let url = `https://kauth.kakao.com/oauth/token?grant_type=${grant_type}&client_id=${client_id}&redirect_uri=${"http://localhost:3000/stop-banner-frontend/"}&code=${code}`;
    let data = {
      headers: {
        "Content-type": "application/x-www-form-urlencoded;charset=utf-8",
      },
    };

    let res = await axios.post(url, data);

    return res.data.access_token;
  }
)

export const loginSlice = createSlice({
  name: "login",
  initialState,
  reducers: {
    logout: (state) => {
      state.status = "none";
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(kakaoLoginAsync.pending, (state) => {
        state.status = "logging";
        console.log("logging");
      })
      .addCase(kakaoLoginAsync.fulfilled, (state, action) => {
        state.status = "logged in";
        console.log("logged in");
      })
      .addCase(kakaoLoginAsync.rejected, (state) => {
        state.status = "failed";
        console.log("failed");
      })

      .addCase(getKakaoAccessTokenAsync.fulfilled, (state, action) => {
        state.status = "logged in";
        state.kakaoAccessToken = action.payload;
      });
  },
});

export const { logout } = loginSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they"re used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;
export const selectKakaoAccessToken = (state: RootState) => state.login.kakaoAccessToken;
export const selectLoginStatus = (state: RootState) => state.login.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here"s an example of conditionally dispatching actions based on current state.
/*
export const incrementIfOdd =
  (amount: number): AppThunk =>
    (dispatch, getState) => {
      const currentValue = selectCount(getState());
      if (currentValue % 2 === 1) {
        dispatch(incrementByAmount(amount));
      }
    };
*/

export default loginSlice.reducer;
