import { createSlice } from "@reduxjs/toolkit";

export interface ReportArticleState {
  articleIndex: number;
}

const initialState: ReportArticleState = {
  articleIndex: 0,
};

export const reportArticleSlice = createSlice({
  name: "reportArticle",
  initialState,
  reducers: {
    setArticleIndex: (state, action) => {
      state.articleIndex = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // builder
    //   .addCase(kakaoLoginAsync.pending, (state) => {
    //   })
    //   .addCase(kakaoLoginAsync.fulfilled, (state, action) => {
    //   })
    //   .addCase(kakaoLoginAsync.rejected, (state) => {
    //   })
  },
});

export const { setArticleIndex } = reportArticleSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they"re used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;
// export const selectKakaoAccessToken = (state: RootState) => state.login.kakaoAccessToken;
// export const selectLoginStatus = (state: RootState) => state.login.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here"s an example of conditionally dispatching actions based on current state.
/*
export const incrementIfOdd =
  (amount: number): AppThunk =>
    (dispatch, getState) => {
      const currentValue = selectCount(getState());
      if (currentValue % 2 === 1) {
        dispatch(incrementByAmount(amount));
      }
    };
*/

export default reportArticleSlice.reducer;
